1. After reviewing my code, I think I generally adhered to the style guidelines. I structured the code in a layered manner and separated different modules like ps2.c, keyboard.c, and shell.c. One aspect of my code I am proud of is the implementation of the shell extensions: command line history,, support for control keys (Ctrl-A, Ctrl-E, Ctrl-U), tab completion, and navigation with left/right arrow keys. In shell.c, I had to manage movements and input buffer updates for users to update their command lines. This required functions like insert_char, delete_char, and move_cursor_to. Areas where I could improve are how I handled modifier keys in keyboard.c. I implemented support for Shift and Caps Lock but could have adjusted is_modifier and update_modifiers to be less rigid for Alt and Ctrl. I would refactor these in the future. 

2. To extend keyboard support for a Dvorak layout, I would modify the key mapping in keyboard.c, specifically the ps2_keys array maps and scan codes. I might create a shell command to toggle between layouts. This would be a simple implementation. To support other modifiers, i would expand the keyboard_modifiers_t enum. In keyboard_read_event, I would detect when the modifier keys are pressed or released and update current_modifiers. I would also adjust the update_modifiers function. A cool extension would be a macro that records and plays back functionality like recording a few key sequences and then replaying them. I would add a macro recording module that would capture key events when active. Then, this would be stored in a history with commands that could start, stop, save, and execute macros.

3. In ps2.c:
ps2_new: Public. Inits PS/2 devices for other modules. Pro: Enables external modules to create / config PS/2 devices. Con: Adds dependency on function’s stability,interface.
ps2_read: Public. Reads scancodes from PS/2 devices. Pro: need for modules like keyboard to receive input data. Con: exposees low-level reading, making changes harder.
read_bit: Private. Reads individual bits from PS/2 device. Pro: Hides protocol details → internal modifications. Con: Limits access → rip debugging.

In keyboard.c:
keyboard_init: Public. Initializes keyboard module. Pro: Required for external modules to enable keyboard functionality. Con: Increases dependency on init logic.
keyboard_read_scancode: Private/Protected. Reads raw scancodes from the keyboard. Pro: protects scancode handling. Con: reduces flexibility for modules needing scancodes.
keyboard_read_sequence: Public. Processes scancode sequences into key actions. Pro: helpful for modules needing access to key actions. Con: Exposes internal logic; risk of breaking dependent modules if changed.
keyboard_read_event: Public. Provides key events with modifiers processed. Pro: Simplifies key event handling for external modules. Con: Requires maintaining event format consistent when changes.
keyboard_read_next: Public. Converts key events into characters. Pro: Simplifies text input for applications, e.g., text editors. Con: Less flexible for low-level control / raw input.

4. I found the state pattern interesting. This “allow[s] an object to alter its behavior when its internal state changes. The object will appear to change its class.” This is useful for when objects must change at runtime depending on state. In a game, if a player needs to stand, run, jump, and duck, each state changes depending on how the character responds. We can just maintain a reference to the current state and delegate input handling to the state object. In our shell program, we could use the state pattern to manage modes of the shell (normal, insert, command), similar to Vim. This would allow for new modes without altering the shell logic. This separates state-specific behaviors and simplifies adding/modifying states, adhering to the open/closed principle.

5. To allow a user of my shell to bind one of my shell functions to a new key combo, I would create a new shell command bind that allows the user to create aliases for existing commands. I might do something like bind help h to parse input, search for the existing command, and add a new command_t entry for name h, fn pointer. For example:
int cmd_bind(int argc, const char *argv[]) {
    if (argc != 3) {
        shell_state.shell_printf("error: bind expects 2 arguments [existing_command] [new_alias]\n");
        return 1;
    }
    const char *existing = argv[1];
    const char *alias = argv[2];
    for (size_t i = 0; i < num_commands; i++) {
        if (strcmp(existing, commands[i].name) == 0) {
            // Add new command alias
            commands[num_commands++] = (command_t){alias, commands[i].usage, commands[i].description, commands[i].fn};
            shell_state.shell_printf("Bound '%s' to '%s'\n", alias, existing);
            return 0;
        }
    }
    shell_state.shell_printf("error: no such command '%s'\n", existing);
    return 1;
}

With fp, we dynamically assign functions to new command names. Without it, we would probably need a string mapping. A dictionary would be helpful, but it requires lots of string manipulation.